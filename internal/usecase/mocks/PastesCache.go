// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/romankravchuk/pastebin/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// PastesCache is an autogenerated mock type for the PastesCache type
type PastesCache struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *PastesCache) Create(_a0 context.Context, _a1 entity.Paste) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Paste) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *PastesCache) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *PastesCache) Get(_a0 context.Context, _a1 string) (entity.Paste, bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Paste
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Paste, bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Paste); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Paste)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewPastesCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewPastesCache creates a new instance of PastesCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPastesCache(t mockConstructorTestingTNewPastesCache) *PastesCache {
	mock := &PastesCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
