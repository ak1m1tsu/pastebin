// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/romankravchuk/pastebin/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Pastes is an autogenerated mock type for the Pastes type
type Pastes struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Pastes) Create(_a0 context.Context, _a1 entity.Paste) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Paste) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Pastes) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Pastes) Get(_a0 context.Context, _a1 string) (entity.Paste, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Paste
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Paste, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Paste); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Paste)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Pastes) Update(_a0 context.Context, _a1 *entity.Paste) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Paste) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPastes interface {
	mock.TestingT
	Cleanup(func())
}

// NewPastes creates a new instance of Pastes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPastes(t mockConstructorTestingTNewPastes) *Pastes {
	mock := &Pastes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
