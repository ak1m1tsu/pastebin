// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PastesBlobStorage is an autogenerated mock type for the PastesBlobStorage type
type PastesBlobStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, bucket, id, data
func (_m *PastesBlobStorage) Create(ctx context.Context, bucket string, id string, data []byte) error {
	ret := _m.Called(ctx, bucket, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, bucket, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PastesBlobStorage) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *PastesBlobStorage) Get(ctx context.Context, id string) ([]byte, error) {
	ret := _m.Called(ctx, id)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *PastesBlobStorage) Update(ctx context.Context, id string, data []byte) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPastesBlobStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewPastesBlobStorage creates a new instance of PastesBlobStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPastesBlobStorage(t mockConstructorTestingTNewPastesBlobStorage) *PastesBlobStorage {
	mock := &PastesBlobStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
