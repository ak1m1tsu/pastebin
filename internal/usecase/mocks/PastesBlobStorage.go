// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/romankravchuk/pastebin/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// PastesBlobStorage is an autogenerated mock type for the PastesBlobStorage type
type PastesBlobStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, p
func (_m *PastesBlobStorage) Create(ctx context.Context, p *entity.Paste) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Paste) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, hash
func (_m *PastesBlobStorage) Delete(ctx context.Context, hash string) error {
	ret := _m.Called(ctx, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userID, hash
func (_m *PastesBlobStorage) Get(ctx context.Context, userID string, hash string) (entity.File, error) {
	ret := _m.Called(ctx, userID, hash)

	var r0 entity.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.File, error)); ok {
		return rf(ctx, userID, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.File); ok {
		r0 = rf(ctx, userID, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, p
func (_m *PastesBlobStorage) Update(ctx context.Context, p *entity.Paste) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Paste) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPastesBlobStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewPastesBlobStorage creates a new instance of PastesBlobStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPastesBlobStorage(t mockConstructorTestingTNewPastesBlobStorage) *PastesBlobStorage {
	mock := &PastesBlobStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
